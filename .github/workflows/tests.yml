name: Run E2E Tests React-app

on:
  workflow_dispatch:
    inputs:
      testBranch:
        description: 'React App branch name'
        required: true
      stxBranch:
        description: 'Stx (precedence: input value, react app branch name, then master)'
        required: false
  push:

env:
  TEST_BRANCH: ${{
    github.event.inputs.testBranch != NaN && github.event.inputs.testBranch ||
    github.event.client_payload.github.event.head_commit.test_branch != NaN && github.event.client_payload.github.event.head_commit.test_branch }}
  STX_BRANCH: ${{
    github.event.inputs.stxBranch != NaN && github.event.inputs.stxBranch ||
    github.event.client_payload.github.event.head_commit.stx_branch != NaN && github.event.client_payload.github.event.head_commit.stx_branch ||
    'master'
    }}
  CHROMEDRIVER: ${{ secrets.CHROMEDRIVER_VERSION }}
  GECKODRIVER: ${{ secrets.GECKODRIVER_VERSION }}

jobs:
  chrome:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        node-version: [ 12.x ]

    steps:
      - name: Checkout
        uses: actions/checkout@v2
        with:
          repository: ChartIQ/chartiq-react-app-private
          ref: ${{ env.TEST_BRANCH != NaN && env.TEST_BRANCH }}

      - name: Use Node.js ${{ matrix.node-version }}
        uses: actions/setup-node@v1
        with:
          node-version: ${{ matrix.node-version }}

      - name: Set timezone
        uses: szenius/set-timezone@v1.0
        with:
          timezoneLinux: "America/New_York"

      - name: Extract counterpart branch name
        shell: bash
        run: echo "COUNTERPART_BRANCH=$(echo ${GITHUB_REF#refs/heads/})" >> $GITHUB_ENV

      - name: Clone stx repository(input branch)
        continue-on-error: true
        working-directory: ./tests
        id: input-branch
        run: git clone https://${{ secrets.GHA_ACCESS_TOKEN }}@github.com/ChartIQ/stx.git -b ${{ env.STX_BRANCH != NaN && env.STX_BRANCH }}

      - name: Clone stx repository(counterpart branch)
        continue-on-error: true
        if: steps.input-branch.outcome != 'success'
        working-directory: ./tests
        id: counterpart
        run: git clone https://${{ secrets.GHA_ACCESS_TOKEN }}@github.com/ChartIQ/stx.git -b ${{ env.COUNTERPART_BRANCH != NaN && env.COUNTERPART_BRANCH }}

      - name: Clone stx repository(master)
        continue-on-error: false
        if: steps.input-branch.outcome != 'success' && steps.counterpart.outcome != 'success'
        working-directory: ./tests
        id: master
        run: git clone https://${{ secrets.GHA_ACCESS_TOKEN }}@github.com/ChartIQ/stx.git -b master

      - name: Install dependencies for React app
        run: npm install

      - name: Install dependencies for tests
        working-directory: ./tests
        run: npm install

      - name: Show secrets.CHROMEDRIVER_VERSION
        if: ${{ env.CHROMEDRIVER != NaN && env.CHROMEDRIVER != '' && env.CHROMEDRIVER }}
        run: echo ${{env.CHROMEDRIVER}} | sed 's/./& /g'

      - name: Install chromedriver version from secret
        if: ${{ env.CHROMEDRIVER != NaN && env.CHROMEDRIVER != '' && env.CHROMEDRIVER }}
        working-directory: ./tests/stx/tests
        run: npm install chromedriver@${{ env.CHROMEDRIVER }}

      - name: Install dependencies for stx
        working-directory: ./tests/stx
        run: npm install

      - name: Build project-test
        working-directory: ./tests
        run: npm run build:test

      - name: Build project-chartiq
        working-directory: ./tests
        run: npm run build:chartiq

      - name: Prepare application
        working-directory: ./tests
        run: npm run ciq-prep-app

      - name: Check tests groups
        working-directory: ./tests
        run: npm run check-specs

      - name: Run e2e-v2 tests with Chrome browser
        working-directory: ./tests
        run: npm run test-chrome-ci

      - name: Save allure-results artifact
        if: ${{ success() || failure() }}
        uses: actions/upload-artifact@master
        with:
          name: allure-chrome
          path: ./tests/allure-results

  firefox:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        node-version: [ 12.x ]

    steps:
      - name: Checkout
        uses: actions/checkout@v2
        with:
          repository: ChartIQ/chartiq-react-app-private
          ref: ${{ env.TEST_BRANCH != NaN && env.TEST_BRANCH }}

      - name: Use Node.js ${{ matrix.node-version }}
        uses: actions/setup-node@v1
        with:
          node-version: ${{ matrix.node-version }}

      - name: Set timezone
        uses: szenius/set-timezone@v1.0
        with:
          timezoneLinux: "America/New_York"

      - name: Extract counterpart branch name
        shell: bash
        run: echo "COUNTERPART_BRANCH=$(echo ${GITHUB_REF#refs/heads/})" >> $GITHUB_ENV

      - name: Clone stx repository(input branch)
        continue-on-error: true
        working-directory: ./tests
        id: input-branch
        run: git clone https://${{ secrets.GHA_ACCESS_TOKEN }}@github.com/ChartIQ/stx.git -b ${{ env.STX_BRANCH != NaN && env.STX_BRANCH }}

      - name: Clone stx repository(counterpart branch)
        continue-on-error: true
        if: steps.input-branch.outcome != 'success'
        working-directory: ./tests
        id: counterpart
        run: git clone https://${{ secrets.GHA_ACCESS_TOKEN }}@github.com/ChartIQ/stx.git -b ${{ env.COUNTERPART_BRANCH != NaN && env.COUNTERPART_BRANCH }}

      - name: Clone stx repository(master)
        continue-on-error: false
        if: steps.input-branch.outcome != 'success' && steps.counterpart.outcome != 'success'
        working-directory: ./tests
        id: master
        run: git clone https://${{ secrets.GHA_ACCESS_TOKEN }}@github.com/ChartIQ/stx.git -b master

      - name: Install dependencies for React app
        run: npm install

      - name: Install dependencies for tests
        working-directory: ./tests
        run: npm install

      - name: Show secrets.GECKODRIVER_VERSION
        if: ${{ env.GECKODRIVER != NaN && env.GECKODRIVER != '' && env.GECKODRIVER }}
        run: echo ${{env.GECKODRIVER}} | sed 's/./& /g'

      - name: Install geckodriver secret version
        if: ${{ env.GECKODRIVER != NaN && env.GECKODRIVER != '' && env.GECKODRIVER }}
        working-directory: ./tests/stx/tests
        run: npm install geckodriver@${{ env.GECKODRIVER }}

      - name: Install dependencies for stx
        working-directory: ./tests/stx
        run: npm install

      - name: Build project-test
        working-directory: ./tests
        run: npm run build:test

      - name: Build project-chartiq
        working-directory: ./tests
        run: npm run build:chartiq

      - name: Prepare application
        working-directory: ./tests
        run: npm run ciq-prep-app

      - name: Check tests groups
        working-directory: ./tests
        run: npm run check-specs

      - name: Run e2e-v2 tests with Firefox browser
        working-directory: ./tests
        run: npm run test-ff-ci

      - name: Save allure-results artifact
        if: ${{ success() || failure() }}
        uses: actions/upload-artifact@master
        with:
          name: allure-ff
          path: ./tests/allure-results

  allure:
    runs-on: ubuntu-latest
    needs: [chrome, firefox]
    if: ${{ !cancelled() }}
    strategy:
      matrix:
        node-version: [ 12.x ]

    steps:
      - name: Checkout
        uses: actions/checkout@v2
        with:
          repository: ChartIQ/chartiq-react-app-private
          ref: ${{ env.TEST_BRANCH != NaN && env.TEST_BRANCH }}

      - name: Use Node.js ${{ matrix.node-version }}
        uses: actions/setup-node@v1
        with:
          node-version: ${{ matrix.node-version }}

      - name: Set timezone
        uses: szenius/set-timezone@v1.0
        with:
          timezoneLinux: "America/New_York"

      - name: Extract counterpart branch name
        shell: bash
        run: echo "COUNTERPART_BRANCH=$(echo ${GITHUB_REF#refs/heads/})" >> $GITHUB_ENV

      - name: Clone stx repository(input branch)
        continue-on-error: true
        working-directory: ./tests
        id: input-branch
        run: git clone https://${{ secrets.GHA_ACCESS_TOKEN }}@github.com/ChartIQ/stx.git -b ${{ env.STX_BRANCH != NaN && env.STX_BRANCH }}

      - name: Clone stx repository(counterpart branch)
        continue-on-error: true
        if: steps.input-branch.outcome != 'success'
        working-directory: ./tests
        id: counterpart
        run: git clone https://${{ secrets.GHA_ACCESS_TOKEN }}@github.com/ChartIQ/stx.git -b ${{ env.COUNTERPART_BRANCH != NaN && env.COUNTERPART_BRANCH }}

      - name: Clone stx repository(master)
        continue-on-error: false
        if: steps.input-branch.outcome != 'success' && steps.counterpart.outcome != 'success'
        working-directory: ./tests
        id: master
        run: git clone https://${{ secrets.GHA_ACCESS_TOKEN }}@github.com/ChartIQ/stx.git -b master

      - name: Build project-test
        working-directory: ./tests
        run: npm run build:test

      - name: Load allure-results from Chrome
        uses: actions/download-artifact@master
        with:
          name: allure-chrome
          path: "./tests/allure-results"

      - name: Load allure-results from Firefox
        uses: actions/download-artifact@master
        with:
          name: allure-ff
          path: "./tests/allure-results"

      - name: Generate allure report
        if: ${{ failure() || success() }}
        working-directory: ./tests
        run: npm run report-ci
        continue-on-error: true

      - name: Sync Allure to S3
        if: ${{ failure() || success() }}
        run: aws s3 sync ./tests/allure-report/ s3://react-app-allurereports.chartiq.com/${{ github.sha }} --acl public-read --delete
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          AWS_REGION: "us-east-1" # optional: defaults to us-east-1

      - name: Show the allure report location
        if: ${{ failure() || success() }}
        run: echo http://react-app-allurereports.chartiq.com.s3-website-us-east-1.amazonaws.com/${{ github.sha }}/


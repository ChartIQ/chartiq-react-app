name: Run E2E Tests React-app

on:
  repository_dispatch:
    types: [ regression_test_run ]
  push:
    branches:
      - 'POC'

env:
  TEST_BRANCH: ${{ github.event.client_payload.github.event.head_commit.test_branch != NaN && github.event.client_payload.github.event.head_commit.test_branch || 'POC' }}
  STX_BRANCH: ${{ github.event.client_payload.github.event.head_commit.stx_branch != NaN && github.event.client_payload.github.event.head_commit.stx_branch || 'new-tests-package' }}

jobs:
  test:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        node-version: [ 14.x ]

    steps:

      - name: Checkout
        uses: actions/checkout@v2
        with:
          repository: ChartIQ/chartiq-react-app-private
          ref: ${{ env.TEST_BRANCH != NaN && env.TEST_BRANCH }}

      - name: Use Node.js ${{ matrix.node-version }}
        uses: actions/setup-node@v1
        with:
          node-version: ${{ matrix.node-version }}

      - name: Clone stx repository
        run: git clone https://${{ secrets.GHA_ACCESS_TOKEN }}@github.com/ChartIQ/stx.git -b ${{ env.STX_BRANCH != NaN && env.STX_BRANCH }}

      - name: Cache node modules (root)
        uses: actions/cache@v2
        id: root
        env:
          cache-name: root
        with:
          path: "./node_modules/"
          key: ${{ runner.os }}-build-${{ env.cache-name }}-${{ hashFiles('package-lock.json') }}
        timeout-minutes: 4

      - name: Cache node modules (stx)
        uses: actions/cache@v2
        id: stx
        env:
          cache-name: stx
        with:
          path: "./stx/node_modules/"
          key: ${{ runner.os }}-build-${{ env.cache-name }}-${{ hashFiles('./stx/package-lock.json') }}
        timeout-minutes: 4

      - name: Install dependencies for stx
        working-directory: ./stx
        run: npm install

      - name: Install dependencies for app
        run: npm install

      - name: Build project-test
        run: npm run build:test

      - name: Build project-chartiq
        run: npm run build:chartiq

      - name: Prepare application
        run: npm run ciq-prep-app

      - name: Run e2e-new tests with Chrome browser
        run: npm run test-chrome
        if: ${{ always() }}

      - name: Run e2e-new tests with FireFox browser
        run: npm run test-ff
        if: ${{ always() }}

      - name: Generate allure report
        if: always()
        run: npm run report-ci
        continue-on-error: true

      - name: Sync Allure to S3
        run: aws s3 sync ./allure-report/ s3://stx-allurereports.chartiq.com/${{ github.sha }} --acl public-read --delete
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          AWS_REGION: "us-east-1" # optional: defaults to us-east-1
        if: ${{ always() }}

      - name: Show the allure report location
        run: echo http://react-app-allurereports.chartiq.com.s3-website-us-east-1.amazonaws.com/${{ github.sha }}/
        if: ${{ always() }}

      - name: Upload Allure Report
        uses: actions/upload-artifact@v2
        with:
         name: allure report
         path: ./allure-report
        if: ${{ always() }}

